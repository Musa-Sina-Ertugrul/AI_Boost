# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _AIBoost
else:
    import _AIBoost

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AIBoost.delete_SwigPyIterator

    def value(self):
        return _AIBoost.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AIBoost.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AIBoost.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AIBoost.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AIBoost.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AIBoost.SwigPyIterator_copy(self)

    def next(self):
        return _AIBoost.SwigPyIterator_next(self)

    def __next__(self):
        return _AIBoost.SwigPyIterator___next__(self)

    def previous(self):
        return _AIBoost.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AIBoost.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AIBoost.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AIBoost.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AIBoost.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AIBoost.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AIBoost.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AIBoost.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AIBoost:
_AIBoost.SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AIBoost.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AIBoost.FloatVector___nonzero__(self)

    def __bool__(self):
        return _AIBoost.FloatVector___bool__(self)

    def __len__(self):
        return _AIBoost.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _AIBoost.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AIBoost.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AIBoost.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AIBoost.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AIBoost.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AIBoost.FloatVector___setitem__(self, *args)

    def pop(self):
        return _AIBoost.FloatVector_pop(self)

    def append(self, x):
        return _AIBoost.FloatVector_append(self, x)

    def empty(self):
        return _AIBoost.FloatVector_empty(self)

    def size(self):
        return _AIBoost.FloatVector_size(self)

    def swap(self, v):
        return _AIBoost.FloatVector_swap(self, v)

    def begin(self):
        return _AIBoost.FloatVector_begin(self)

    def end(self):
        return _AIBoost.FloatVector_end(self)

    def rbegin(self):
        return _AIBoost.FloatVector_rbegin(self)

    def rend(self):
        return _AIBoost.FloatVector_rend(self)

    def clear(self):
        return _AIBoost.FloatVector_clear(self)

    def get_allocator(self):
        return _AIBoost.FloatVector_get_allocator(self)

    def pop_back(self):
        return _AIBoost.FloatVector_pop_back(self)

    def erase(self, *args):
        return _AIBoost.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _AIBoost.FloatVector_swiginit(self, _AIBoost.new_FloatVector(*args))

    def push_back(self, x):
        return _AIBoost.FloatVector_push_back(self, x)

    def front(self):
        return _AIBoost.FloatVector_front(self)

    def back(self):
        return _AIBoost.FloatVector_back(self)

    def assign(self, n, x):
        return _AIBoost.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _AIBoost.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _AIBoost.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _AIBoost.FloatVector_reserve(self, n)

    def capacity(self):
        return _AIBoost.FloatVector_capacity(self)
    __swig_destroy__ = _AIBoost.delete_FloatVector

# Register FloatVector in _AIBoost:
_AIBoost.FloatVector_swigregister(FloatVector)

class FloatVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AIBoost.FloatVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AIBoost.FloatVectorVector___nonzero__(self)

    def __bool__(self):
        return _AIBoost.FloatVectorVector___bool__(self)

    def __len__(self):
        return _AIBoost.FloatVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _AIBoost.FloatVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AIBoost.FloatVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AIBoost.FloatVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AIBoost.FloatVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AIBoost.FloatVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AIBoost.FloatVectorVector___setitem__(self, *args)

    def pop(self):
        return _AIBoost.FloatVectorVector_pop(self)

    def append(self, x):
        return _AIBoost.FloatVectorVector_append(self, x)

    def empty(self):
        return _AIBoost.FloatVectorVector_empty(self)

    def size(self):
        return _AIBoost.FloatVectorVector_size(self)

    def swap(self, v):
        return _AIBoost.FloatVectorVector_swap(self, v)

    def begin(self):
        return _AIBoost.FloatVectorVector_begin(self)

    def end(self):
        return _AIBoost.FloatVectorVector_end(self)

    def rbegin(self):
        return _AIBoost.FloatVectorVector_rbegin(self)

    def rend(self):
        return _AIBoost.FloatVectorVector_rend(self)

    def clear(self):
        return _AIBoost.FloatVectorVector_clear(self)

    def get_allocator(self):
        return _AIBoost.FloatVectorVector_get_allocator(self)

    def pop_back(self):
        return _AIBoost.FloatVectorVector_pop_back(self)

    def erase(self, *args):
        return _AIBoost.FloatVectorVector_erase(self, *args)

    def __init__(self, *args):
        _AIBoost.FloatVectorVector_swiginit(self, _AIBoost.new_FloatVectorVector(*args))

    def push_back(self, x):
        return _AIBoost.FloatVectorVector_push_back(self, x)

    def front(self):
        return _AIBoost.FloatVectorVector_front(self)

    def back(self):
        return _AIBoost.FloatVectorVector_back(self)

    def assign(self, n, x):
        return _AIBoost.FloatVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _AIBoost.FloatVectorVector_resize(self, *args)

    def insert(self, *args):
        return _AIBoost.FloatVectorVector_insert(self, *args)

    def reserve(self, n):
        return _AIBoost.FloatVectorVector_reserve(self, n)

    def capacity(self):
        return _AIBoost.FloatVectorVector_capacity(self)
    __swig_destroy__ = _AIBoost.delete_FloatVectorVector

# Register FloatVectorVector in _AIBoost:
_AIBoost.FloatVectorVector_swigregister(FloatVectorVector)

class LayerPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AIBoost.LayerPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AIBoost.LayerPtrVector___nonzero__(self)

    def __bool__(self):
        return _AIBoost.LayerPtrVector___bool__(self)

    def __len__(self):
        return _AIBoost.LayerPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _AIBoost.LayerPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AIBoost.LayerPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AIBoost.LayerPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AIBoost.LayerPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AIBoost.LayerPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AIBoost.LayerPtrVector___setitem__(self, *args)

    def pop(self):
        return _AIBoost.LayerPtrVector_pop(self)

    def append(self, x):
        return _AIBoost.LayerPtrVector_append(self, x)

    def empty(self):
        return _AIBoost.LayerPtrVector_empty(self)

    def size(self):
        return _AIBoost.LayerPtrVector_size(self)

    def swap(self, v):
        return _AIBoost.LayerPtrVector_swap(self, v)

    def begin(self):
        return _AIBoost.LayerPtrVector_begin(self)

    def end(self):
        return _AIBoost.LayerPtrVector_end(self)

    def rbegin(self):
        return _AIBoost.LayerPtrVector_rbegin(self)

    def rend(self):
        return _AIBoost.LayerPtrVector_rend(self)

    def clear(self):
        return _AIBoost.LayerPtrVector_clear(self)

    def get_allocator(self):
        return _AIBoost.LayerPtrVector_get_allocator(self)

    def pop_back(self):
        return _AIBoost.LayerPtrVector_pop_back(self)

    def erase(self, *args):
        return _AIBoost.LayerPtrVector_erase(self, *args)

    def __init__(self, *args):
        _AIBoost.LayerPtrVector_swiginit(self, _AIBoost.new_LayerPtrVector(*args))

    def push_back(self, x):
        return _AIBoost.LayerPtrVector_push_back(self, x)

    def front(self):
        return _AIBoost.LayerPtrVector_front(self)

    def back(self):
        return _AIBoost.LayerPtrVector_back(self)

    def assign(self, n, x):
        return _AIBoost.LayerPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _AIBoost.LayerPtrVector_resize(self, *args)

    def insert(self, *args):
        return _AIBoost.LayerPtrVector_insert(self, *args)

    def reserve(self, n):
        return _AIBoost.LayerPtrVector_reserve(self, n)

    def capacity(self):
        return _AIBoost.LayerPtrVector_capacity(self)
    __swig_destroy__ = _AIBoost.delete_LayerPtrVector

# Register LayerPtrVector in _AIBoost:
_AIBoost.LayerPtrVector_swigregister(LayerPtrVector)

class DataSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inputs = property(_AIBoost.DataSet_inputs_get, _AIBoost.DataSet_inputs_set)
    outputs = property(_AIBoost.DataSet_outputs_get, _AIBoost.DataSet_outputs_set)
    row1 = property(_AIBoost.DataSet_row1_get, _AIBoost.DataSet_row1_set)
    row2 = property(_AIBoost.DataSet_row2_get, _AIBoost.DataSet_row2_set)
    col1 = property(_AIBoost.DataSet_col1_get, _AIBoost.DataSet_col1_set)
    col2 = property(_AIBoost.DataSet_col2_get, _AIBoost.DataSet_col2_set)

    def __init__(self, inputs, outputs, row1, col1, row2, col2):
        _AIBoost.DataSet_swiginit(self, _AIBoost.new_DataSet(inputs, outputs, row1, col1, row2, col2))
    __swig_destroy__ = _AIBoost.delete_DataSet

# Register DataSet in _AIBoost:
_AIBoost.DataSet_swigregister(DataSet)

BCELoss = _AIBoost.BCELoss
CELoss = _AIBoost.CELoss
L1Loss = _AIBoost.L1Loss
L2Loss = _AIBoost.L2Loss
SoftMax = _AIBoost.SoftMax
Tanh = _AIBoost.Tanh
Sigmoid = _AIBoost.Sigmoid
Relu = _AIBoost.Relu
_None = _AIBoost._None
L1 = _AIBoost.L1
L2 = _AIBoost.L2
class Layer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    inputs = property(_AIBoost.Layer_inputs_get, _AIBoost.Layer_inputs_set)
    outputs = property(_AIBoost.Layer_outputs_get, _AIBoost.Layer_outputs_set)
    grads = property(_AIBoost.Layer_grads_get, _AIBoost.Layer_grads_set)
    outputsActiveted = property(_AIBoost.Layer_outputsActiveted_get, _AIBoost.Layer_outputsActiveted_set)
    weights = property(_AIBoost.Layer_weights_get, _AIBoost.Layer_weights_set)
    pastMomentum = property(_AIBoost.Layer_pastMomentum_get, _AIBoost.Layer_pastMomentum_set)
    pastVelocity = property(_AIBoost.Layer_pastVelocity_get, _AIBoost.Layer_pastVelocity_set)
    errorWeights = property(_AIBoost.Layer_errorWeights_get, _AIBoost.Layer_errorWeights_set)
    F = property(_AIBoost.Layer_F_get, _AIBoost.Layer_F_set)
    random_dist = property(_AIBoost.Layer_random_dist_get, _AIBoost.Layer_random_dist_set)
    gen = property(_AIBoost.Layer_gen_get, _AIBoost.Layer_gen_set)
    _in = property(_AIBoost.Layer__in_get, _AIBoost.Layer__in_set)
    out = property(_AIBoost.Layer_out_get, _AIBoost.Layer_out_set)

    def __init__(self, *args):
        _AIBoost.Layer_swiginit(self, _AIBoost.new_Layer(*args))
    __swig_destroy__ = _AIBoost.delete_Layer

# Register Layer in _AIBoost:
_AIBoost.Layer_swigregister(Layer)

class Model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    epochs = property(_AIBoost.Model_epochs_get, _AIBoost.Model_epochs_set)
    boucingLR = property(_AIBoost.Model_boucingLR_get, _AIBoost.Model_boucingLR_set)
    lossType = property(_AIBoost.Model_lossType_get, _AIBoost.Model_lossType_set)
    layers = property(_AIBoost.Model_layers_get, _AIBoost.Model_layers_set)
    datas = property(_AIBoost.Model_datas_get, _AIBoost.Model_datas_set)
    dropOutRate = property(_AIBoost.Model_dropOutRate_get, _AIBoost.Model_dropOutRate_set)
    regType = property(_AIBoost.Model_regType_get, _AIBoost.Model_regType_set)
    regLambda = property(_AIBoost.Model_regLambda_get, _AIBoost.Model_regLambda_set)
    learningRate = property(_AIBoost.Model_learningRate_get, _AIBoost.Model_learningRate_set)
    ZeroToOne = property(_AIBoost.Model_ZeroToOne_get, _AIBoost.Model_ZeroToOne_set)
    bacthSize = property(_AIBoost.Model_bacthSize_get, _AIBoost.Model_bacthSize_set)

    def __init__(self, layers, arg3, boucingLR, epochs, dropOutRate, regType, regLambda, lossType, learningRate, ZeroToOne, bacthSize, layerNumber):
        _AIBoost.Model_swiginit(self, _AIBoost.new_Model(layers, arg3, boucingLR, epochs, dropOutRate, regType, regLambda, lossType, learningRate, ZeroToOne, bacthSize, layerNumber))
    __swig_destroy__ = _AIBoost.delete_Model

    def trainModel(self):
        return _AIBoost.Model_trainModel(self)

# Register Model in _AIBoost:
_AIBoost.Model_swigregister(Model)



